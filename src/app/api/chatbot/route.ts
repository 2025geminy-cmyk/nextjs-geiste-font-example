import { NextRequest, NextResponse } from 'next/server'

// Simulaci√≥n de base de conocimientos para respuestas del chatbot
const knowledgeBase = {
  saludos: [
    'hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'hey', 'hi'
  ],
  servicios: [
    'servicios', 'qu√© ofrecen', 'productos', 'soluciones', 'automatizaci√≥n'
  ],
  precios: [
    'precio', 'costo', 'cu√°nto cuesta', 'tarifas', 'planes'
  ],
  soporte: [
    'ayuda', 'soporte', 'problema', 'error', 'no funciona'
  ],
  contacto: [
    'contacto', 'tel√©fono', 'email', 'direcci√≥n', 'ubicaci√≥n'
  ],
  horarios: [
    'horario', 'horarios', 'cu√°ndo', 'disponibilidad', 'abierto'
  ]
}

const responses = {
  saludos: [
    '¬°Hola! Es un placer ayudarte. ¬øEn qu√© puedo asistirte hoy?',
    '¬°Buenos d√≠as! Estoy aqu√≠ para resolver todas tus dudas sobre nuestros servicios.',
    '¬°Hola! Soy tu asistente de IA. ¬øC√≥mo puedo hacer tu d√≠a m√°s f√°cil?'
  ],
  servicios: [
    'Ofrecemos soluciones completas de automatizaci√≥n con IA para atenci√≥n al cliente, incluyendo:\n\n‚Ä¢ Chatbots inteligentes con procesamiento de lenguaje natural\n‚Ä¢ Sistema de tickets automatizado\n‚Ä¢ An√°lisis de datos y m√©tricas en tiempo real\n‚Ä¢ Integraci√≥n con CRM y sistemas existentes\n‚Ä¢ Atenci√≥n 24/7 sin interrupciones',
    'Nuestras soluciones incluyen chatbots avanzados, gesti√≥n automatizada de tickets, an√°lisis predictivo de datos y integraci√≥n completa con tus sistemas actuales. Todo dise√±ado para mejorar la experiencia del cliente y reducir costos operativos.'
  ],
  precios: [
    'Nuestros planes se adaptan a empresas de todos los tama√±os:\n\n‚Ä¢ Plan B√°sico: Ideal para peque√±as empresas\n‚Ä¢ Plan Profesional: Para medianas empresas con mayor volumen\n‚Ä¢ Plan Enterprise: Soluciones personalizadas para grandes corporaciones\n\nContacta con nuestro equipo comercial para una cotizaci√≥n personalizada seg√∫n tus necesidades espec√≠ficas.',
    'Ofrecemos planes flexibles desde $99/mes para peque√±as empresas hasta soluciones enterprise personalizadas. Todos incluyen soporte t√©cnico, actualizaciones autom√°ticas y garant√≠a de disponibilidad del 99.9%.'
  ],
  soporte: [
    'Nuestro equipo de soporte est√° disponible 24/7 para ayudarte:\n\n‚Ä¢ Chat en vivo en nuestra plataforma\n‚Ä¢ Email: soporte@automateai.com\n‚Ä¢ Tel√©fono: +1 (555) 123-4567\n‚Ä¢ Base de conocimientos completa\n‚Ä¢ Videos tutoriales paso a paso\n\n¬øHay alg√∫n problema espec√≠fico que pueda ayudarte a resolver ahora?',
    'Estoy aqu√≠ para ayudarte con cualquier problema. Tambi√©n puedes contactar a nuestro equipo t√©cnico especializado a trav√©s de soporte@automateai.com o llamando al +1 (555) 123-4567. ¬øCu√°l es el inconveniente que est√°s experimentando?'
  ],
  contacto: [
    'Puedes contactarnos a trav√©s de:\n\nüìß Email: contacto@automateai.com\nüìû Tel√©fono: +1 (555) 123-4567\nüìç Direcci√≥n: Madrid, Espa√±a\nüåê Web: www.automateai.com\n\nNuestro equipo comercial responde en menos de 2 horas durante d√≠as laborables.',
    'Estamos ubicados en Madrid, Espa√±a. Puedes escribirnos a contacto@automateai.com o llamarnos al +1 (555) 123-4567. Tambi√©n ofrecemos reuniones virtuales para demostraciones personalizadas de nuestras soluciones.'
  ],
  horarios: [
    'Nuestros servicios de IA funcionan 24/7, los 365 d√≠as del a√±o.\n\nPara soporte humano:\n‚Ä¢ Lunes a Viernes: 9:00 - 18:00 (CET)\n‚Ä¢ S√°bados: 10:00 - 14:00 (CET)\n‚Ä¢ Domingos: Solo emergencias\n\nEl chatbot y los sistemas automatizados nunca descansan, garantizando atenci√≥n continua a tus clientes.',
    'Nuestros sistemas de automatizaci√≥n trabajan sin descanso, 24 horas al d√≠a, 7 d√≠as a la semana. Para consultas comerciales y soporte t√©cnico especializado, nuestro equipo est√° disponible de lunes a viernes de 9:00 a 18:00 CET.'
  ],
  default: [
    'Entiendo tu consulta. Aunque no tengo una respuesta espec√≠fica para eso, puedo ayudarte con informaci√≥n sobre nuestros servicios de automatizaci√≥n, precios, soporte t√©cnico o ponerte en contacto con un especialista humano. ¬øQu√© te interesa m√°s?',
    'Esa es una pregunta interesante. Te recomiendo contactar directamente con nuestro equipo especializado en contacto@automateai.com o al +1 (555) 123-4567 para obtener informaci√≥n m√°s detallada. ¬øHay algo m√°s en lo que pueda ayudarte?',
    'No estoy seguro de c√≥mo responder a esa consulta espec√≠fica, pero puedo ayudarte con informaci√≥n sobre nuestros servicios, precios, soporte o contacto. Tambi√©n puedo crear un ticket de soporte para que un especialista te contacte. ¬øQu√© prefieres?'
  ]
}

function categorizeQuestion(question: string): string {
  const lowerQuestion = question.toLowerCase()
  
  for (const [category, keywords] of Object.entries(knowledgeBase)) {
    if (keywords.some(keyword => lowerQuestion.includes(keyword))) {
      return category
    }
  }
  
  return 'default'
}

function getRandomResponse(category: string): string {
  const categoryResponses = responses[category as keyof typeof responses] || responses.default
  return categoryResponses[Math.floor(Math.random() * categoryResponses.length)]
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { question } = body

    // Validaci√≥n de entrada
    if (!question || typeof question !== 'string') {
      return NextResponse.json(
        { error: 'La pregunta es requerida y debe ser un texto v√°lido' },
        { status: 400 }
      )
    }

    if (question.trim().length === 0) {
      return NextResponse.json(
        { error: 'La pregunta no puede estar vac√≠a' },
        { status: 400 }
      )
    }

    if (question.length > 1000) {
      return NextResponse.json(
        { error: 'La pregunta es demasiado larga. M√°ximo 1000 caracteres.' },
        { status: 400 }
      )
    }

    // Simular tiempo de procesamiento de IA
    await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1200))

    // Categorizar la pregunta y obtener respuesta
    const category = categorizeQuestion(question.trim())
    const response = getRandomResponse(category)

    // Log para monitoreo (en producci√≥n usar√≠as un sistema de logging real)
    console.log(`[Chatbot] Pregunta: "${question}" | Categor√≠a: ${category} | Timestamp: ${new Date().toISOString()}`)

    return NextResponse.json({
      response,
      category,
      timestamp: new Date().toISOString(),
      confidence: category === 'default' ? 0.3 : 0.85
    })

  } catch (error) {
    console.error('Error en chatbot API:', error)
    
    return NextResponse.json(
      { 
        error: 'Error interno del servidor. Por favor, intenta nuevamente.',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    )
  }
}

// M√©todo GET para verificar el estado de la API
export async function GET() {
  return NextResponse.json({
    status: 'active',
    message: 'Chatbot API funcionando correctamente',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    endpoints: {
      POST: 'Enviar pregunta al chatbot',
      GET: 'Verificar estado de la API'
    }
  })
}

// Rechazar otros m√©todos HTTP
export async function PUT() {
  return NextResponse.json(
    { error: 'M√©todo no permitido' },
    { status: 405 }
  )
}

export async function DELETE() {
  return NextResponse.json(
    { error: 'M√©todo no permitido' },
    { status: 405 }
  )
}
